1. To implements the record lever permission, Sharing rule 
    => with sharing/without sharing(default) 
2. TO SOQL for field and object level
    => SECURITY_ENFORCE 
    =>schema.sObjectType.Contact.fields.emial.isAccessible()
      schema.sObjectType.Contact.isDeletable()
      isCreateable()
      isAccessible()
      isDeletable()
      isInsertable()
      isUpdatable()
    => Security.stripInaccessible() : 
       The method used to remove inaccessible sObject fields before DML operations to avoid exception.
       The method creates a return list of sObjects that is identical to the source records, except that the fields that are inaccessible to the current user are removed.
       
       Exampale:
       ---------
        SObjectAccessDecision securityDecision = Security.stripInaccessible(AccessType.READABLE, sourceRecords);
        Contact c = securityDecision.getRecords()[0];
        System.debug(c.isSet('social_security_number__c')); // prints "false" if the current login user does not have field permission to social_security_number__c
                                                    OR
        SObjectAccessDecision securityDecision = Security.stripInaccessible(AccessType.READABLE,[SELECT Name, BudgetedCost, ActualCost FROM Campaign]);
        if (securityDecision.getRemovedFields().get('Campaign').contains('ActualCost')) {
            for (Campaign c : securityDecision.getRecords()) {
            //System.debug Output: Name, BudgetedCost
            }
        } else {
            for (Campaign c : securityDecision.getRecords()) {
            //System.debug Output: Name, BudgetedCost, ActualCost
            }
        }
       
       Note:
      -------
        stripInAccessible does bot work on aggregate results

Auth.CommunitiesUtil.isInternalUser()

Schema.DescribeSObjectResult
